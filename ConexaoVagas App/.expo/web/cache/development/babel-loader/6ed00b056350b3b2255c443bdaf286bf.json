{"ast":null,"code":"import { API_URL, handleErrors, TOKEN_KEY } from \"./apisettings\";\nvar CONTROLLER = \"Habilidade/\";\n\nfunction listar() {\n  return fetch(API_URL + CONTROLLER, {\n    method: \"GET\",\n    headers: {\n      authorization: 'Bearer ' + asyncStorage.getItem(TOKEN_KEY).then(function (t) {\n        return t;\n      })\n    }\n  }).then(handleErrors).then(function (response) {\n    return response.json();\n  }).catch(function (err) {\n    return console.error(err);\n  });\n}\n\nfunction buscarPorId(id) {\n  return fetch(API_URL + CONTROLLER + id, {\n    method: \"GET\",\n    headers: {\n      authorization: 'Bearer ' + asyncStorage.getItem(TOKEN_KEY).then(function (t) {\n        return t;\n      })\n    }\n  }).then(handleErrors).then(function (response) {\n    return response.json();\n  }).catch(function (err) {\n    return console.error(err);\n  });\n}\n\nfunction salvar(habilidade, id) {\n  var method = id === 0 ? 'POST' : 'PUT';\n  var urlRequest = id === 0 ? API_URL + CONTROLLER : API_URL + CONTROLLER + id;\n  return fetch(urlRequest, {\n    method: method,\n    body: JSON.stringify(habilidade),\n    headers: {\n      'content-type': 'application/json',\n      authorization: 'Bearer ' + asyncStorage.getItem(TOKEN_KEY).then(function (t) {\n        return t;\n      })\n    }\n  }).then(handleErrors).then(function () {\n    return habilidade;\n  }).catch(function (err) {\n    return console.error(err);\n  });\n}\n\nfunction deletar(id) {\n  fetch(API_URL + CONTROLLER + id, {\n    method: 'DELETE',\n    headers: {\n      authorization: 'Bearer ' + asyncStorage.getItem(TOKEN_KEY).then(function (t) {\n        return t;\n      })\n    }\n  }).then(handleErrors).then(function (response) {\n    return response.json();\n  }).catch(function (err) {\n    return console.error(err);\n  });\n}\n\nexport default {\n  listar: listar,\n  buscarPorId: buscarPorId,\n  salvar: salvar,\n  deletar: deletar\n};","map":{"version":3,"sources":["C:/Users/Matheus/Documentos/Projetos/Programacao/React Native/ConexaoVagas-App/api/habilidades.ts"],"names":["API_URL","handleErrors","TOKEN_KEY","CONTROLLER","listar","fetch","method","headers","authorization","asyncStorage","getItem","then","t","response","json","catch","err","console","error","buscarPorId","id","salvar","habilidade","urlRequest","body","JSON","stringify","deletar"],"mappings":"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","sourcesContent":["import { Habilidade } from \"../models/habilidade\";\r\nimport { API_URL, handleErrors, TOKEN_KEY } from \"./apisettings\";\r\n\r\nconst CONTROLLER = \"Habilidade/\";\r\n\r\n/**\r\n * Lista habilidades.\r\n */\r\nfunction listar(): Promise<Habilidade[]> {\r\n    return fetch(API_URL + CONTROLLER, {\r\n        method: \"GET\",\r\n        headers: {\r\n            authorization: 'Bearer ' + asyncStorage.getItem(TOKEN_KEY).then(t => t)\r\n        }\r\n    })\r\n        .then(handleErrors)\r\n        .then(response => {\r\n            return response.json();\r\n        })\r\n        .catch(err => console.error(err));\r\n}\r\n\r\n/**\r\n * \r\n * @param id ID da habilidade\r\n * @returns A habilidade buscada.\r\n */\r\nfunction buscarPorId(id: number): Promise<Habilidade> {\r\n    return fetch(API_URL + CONTROLLER + id, {\r\n        method: \"GET\",\r\n        headers: {\r\n            authorization: 'Bearer ' + asyncStorage.getItem(TOKEN_KEY).then(t => t)\r\n        }\r\n    })\r\n        .then(handleErrors)\r\n        .then(response => {\r\n            return response.json();\r\n        })\r\n        .catch(err => console.error(err));\r\n}\r\n\r\n/**\r\n * \r\n * @param habilidade Objeto habilidade a ser adicionado/atualizado.\r\n * @param id ID do habilidade a ser atualizado.  O valor é 0 quando apenas quer adicionar.\r\n * @returns Objeto habilidade se a operação for feita com sucesso, caso contrário retorno nada.\r\n */\r\nfunction salvar(habilidade: Habilidade, id: number): Promise<Habilidade> {\r\n\r\n    const method = (id === 0 ? 'POST' : 'PUT');\r\n    const urlRequest = (id === 0 ? API_URL + CONTROLLER : API_URL + CONTROLLER + id);\r\n\r\n    return fetch(urlRequest, {\r\n        method: method,\r\n        body: JSON.stringify(habilidade),\r\n        headers: {\r\n            'content-type': 'application/json',\r\n            authorization: 'Bearer ' + asyncStorage.getItem(TOKEN_KEY).then(t => t)\r\n        }\r\n    })\r\n        .then(handleErrors)\r\n        .then(() => {\r\n            return habilidade as any;\r\n        })\r\n        .catch(err => console.error(err));\r\n}\r\n\r\n/**\r\n * Deleta uma habilidade.\r\n * @param id ID da habilidade\r\n */\r\nfunction deletar(id: number): void {\r\n    fetch(API_URL + CONTROLLER + id, {\r\n        method: 'DELETE',\r\n        headers: {\r\n            authorization: 'Bearer ' + asyncStorage.getItem(TOKEN_KEY).then(t => t)\r\n        }\r\n    })\r\n        .then(handleErrors)\r\n        .then(response => response.json())\r\n        .catch(err => console.error(err));\r\n}\r\n\r\nexport default {listar, buscarPorId, salvar, deletar}"]},"metadata":{},"sourceType":"module"}