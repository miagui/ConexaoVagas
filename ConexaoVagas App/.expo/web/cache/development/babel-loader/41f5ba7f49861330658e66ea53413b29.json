{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { API_URL, handleErrors, TOKEN_KEY } from \"./apisettings\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport MatchesApi from \"../api/matching\";\nvar CONTROLLER = \"Candidato/\";\n\nfunction listar() {\n  return _regeneratorRuntime.async(function listar$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.t0 = fetch;\n          _context.t1 = API_URL + CONTROLLER;\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(AsyncStorage.getItem(TOKEN_KEY));\n\n        case 4:\n          _context.t2 = _context.sent;\n          _context.t3 = 'Bearer ' + _context.t2;\n          _context.t4 = {\n            authorization: _context.t3\n          };\n          _context.t5 = {\n            method: \"GET\",\n            headers: _context.t4\n          };\n          return _context.abrupt(\"return\", (0, _context.t0)(_context.t1, _context.t5).then(handleErrors).then(function (response) {\n            return response.json();\n          }).catch(function (err) {\n            return console.error(err);\n          }));\n\n        case 9:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction listarPorStatus(id) {\n  return _regeneratorRuntime.async(function listarPorStatus$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.t0 = fetch;\n          _context2.t1 = API_URL + CONTROLLER + id;\n          _context2.next = 4;\n          return _regeneratorRuntime.awrap(AsyncStorage.getItem(TOKEN_KEY));\n\n        case 4:\n          _context2.t2 = _context2.sent;\n          _context2.t3 = 'Bearer ' + _context2.t2;\n          _context2.t4 = {\n            authorization: _context2.t3\n          };\n          _context2.t5 = {\n            method: \"GET\",\n            headers: _context2.t4\n          };\n          return _context2.abrupt(\"return\", (0, _context2.t0)(_context2.t1, _context2.t5).then(handleErrors).then(function (response) {\n            return response.json();\n          }).catch(function (err) {\n            return console.error(err);\n          }));\n\n        case 9:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction salvar(candidato, id) {\n  var method, urlRequest;\n  return _regeneratorRuntime.async(function salvar$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          method = id === 0 ? 'POST' : 'PUT';\n          urlRequest = id === 0 ? API_URL + CONTROLLER : API_URL + CONTROLLER + id;\n          _context3.t0 = fetch;\n          _context3.t1 = urlRequest;\n          _context3.t2 = method;\n          _context3.t3 = JSON.stringify(candidato);\n          _context3.next = 8;\n          return _regeneratorRuntime.awrap(AsyncStorage.getItem(TOKEN_KEY));\n\n        case 8:\n          _context3.t4 = _context3.sent;\n          _context3.t5 = 'Bearer ' + _context3.t4;\n          _context3.t6 = {\n            'content-type': 'application/json',\n            authorization: _context3.t5\n          };\n          _context3.t7 = {\n            method: _context3.t2,\n            body: _context3.t3,\n            headers: _context3.t6\n          };\n          return _context3.abrupt(\"return\", (0, _context3.t0)(_context3.t1, _context3.t7).then(handleErrors).then(function () {\n            MatchesApi.atualizar();\n            return candidato;\n          }).catch(function (err) {\n            return console.error(err);\n          }));\n\n        case 13:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction uploadFoto(id, file) {\n  var img;\n  return _regeneratorRuntime.async(function uploadFoto$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          img = new FormData();\n          img.append(\"file\", file, id.toString());\n          _context4.t0 = fetch;\n          _context4.t1 = API_URL + CONTROLLER + \"Img/upload/\" + id;\n          _context4.t2 = img;\n          _context4.next = 7;\n          return _regeneratorRuntime.awrap(AsyncStorage.getItem(TOKEN_KEY));\n\n        case 7:\n          _context4.t3 = _context4.sent;\n          _context4.t4 = 'Bearer ' + _context4.t3;\n          _context4.t5 = {\n            'Accept': '*/*',\n            authorization: _context4.t4\n          };\n          _context4.t6 = {\n            method: \"POST\",\n            body: _context4.t2,\n            headers: _context4.t5\n          };\n          return _context4.abrupt(\"return\", (0, _context4.t0)(_context4.t1, _context4.t6).then(handleErrors).then(function () {\n            return id;\n          }).catch(function (err) {\n            return console.error(err);\n          }));\n\n        case 12:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction mudarStatus(id, idStatus) {\n  return _regeneratorRuntime.async(function mudarStatus$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.t0 = fetch;\n          _context5.t1 = API_URL + CONTROLLER + (\"Status?id=\" + id + \"&idStatus=\" + idStatus);\n          _context5.next = 4;\n          return _regeneratorRuntime.awrap(AsyncStorage.getItem(TOKEN_KEY));\n\n        case 4:\n          _context5.t2 = _context5.sent;\n          _context5.t3 = 'Bearer ' + _context5.t2;\n          _context5.t4 = {\n            'content-type': 'application/json',\n            authorization: _context5.t3\n          };\n          _context5.t5 = {\n            method: \"PUT\",\n            headers: _context5.t4\n          };\n          (0, _context5.t0)(_context5.t1, _context5.t5).then(handleErrors).catch(function (err) {\n            return console.error(err);\n          });\n\n        case 9:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexport default {\n  listar: listar,\n  buscarPorId: listarPorStatus,\n  salvar: salvar,\n  mudarStatus: mudarStatus\n};","map":{"version":3,"sources":["C:/Users/Matheus/Documentos/Projetos/Programacao/React Native/ConexaoVagas-App/api/candidatos.ts"],"names":["API_URL","handleErrors","TOKEN_KEY","AsyncStorage","MatchesApi","CONTROLLER","listar","fetch","getItem","authorization","method","headers","then","response","json","catch","err","console","error","listarPorStatus","id","salvar","candidato","urlRequest","JSON","stringify","body","atualizar","uploadFoto","file","img","FormData","append","toString","mudarStatus","idStatus","buscarPorId"],"mappings":"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","sourcesContent":["import { Candidato } from \"../models/candidato\";\r\nimport { API_URL, handleErrors, TOKEN_KEY } from \"./apisettings\";\r\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\r\nimport MatchesApi from \"../api/matching\";\r\n\r\n// Define o controller de comunicação da API.\r\n// A URL ficaria assim:\r\n// http://localhost:5000/api/Candidato/\r\nconst CONTROLLER = \"Candidato/\";\r\n\r\n/**\r\n * Lista os candidatos.\r\n */\r\nasync function listar(): Promise<Candidato[]> {\r\n    return fetch(API_URL + CONTROLLER, {\r\n        method: \"GET\",\r\n        headers: {\r\n            authorization: 'Bearer ' + await AsyncStorage.getItem(TOKEN_KEY)\r\n        }\r\n    })\r\n        .then(handleErrors)\r\n        .then(response => {\r\n            return response.json();\r\n        })\r\n        .catch(err => console.error(err));\r\n}\r\n\r\n/**\r\n * \r\n * @param id ID do candidato\r\n * @returns O candidato buscado.\r\n */\r\nasync function listarPorStatus(id: number): Promise<Candidato> {\r\n    // http://localhost:5000/api/Candidato/5\r\n    return fetch(API_URL + CONTROLLER + id, {\r\n        method: \"GET\",\r\n        headers: {\r\n            authorization: 'Bearer ' + await AsyncStorage.getItem(TOKEN_KEY)\r\n        }\r\n    })\r\n        .then(handleErrors)\r\n        .then(response => {\r\n            return response.json();\r\n        })\r\n        .catch(err => console.error(err));\r\n}\r\n\r\n/**\r\n * \r\n * @param candidato Objeto candidato a ser adicionado/atualizado.\r\n * @param id ID do candidato a ser atualizado.  O valor é 0 quando apenas quer adicionar.\r\n * @returns Objeto candidato se a operação for feita com sucesso, caso contrário retorno nada.\r\n */\r\nasync function salvar(candidato: Candidato, id: number): Promise<Candidato> {\r\n\r\n    const method = (id === 0 ? 'POST' : 'PUT');\r\n    const urlRequest = (id === 0 ? API_URL + CONTROLLER : API_URL + CONTROLLER + id);\r\n\r\n    return fetch(urlRequest, {\r\n        method: method,\r\n        body: JSON.stringify(candidato),\r\n        headers: {\r\n            'content-type': 'application/json',\r\n            authorization: 'Bearer ' + await AsyncStorage.getItem(TOKEN_KEY)\r\n        }\r\n    })\r\n        .then(handleErrors)\r\n        .then(() => {\r\n            MatchesApi.atualizar();\r\n            return candidato as any;\r\n        })\r\n        .catch(err => console.error(err));\r\n}\r\n\r\n/**\r\n * \r\n * @param id ID da Candidato\r\n * @param file Foto\r\n */\r\nasync function uploadFoto(id: number, file: Blob) {\r\n\r\n    var img = new FormData();\r\n    img.append(\"file\", file, id.toString());\r\n\r\n    return fetch(API_URL + CONTROLLER + \"Img/upload/\" + id, {\r\n        method: \"POST\",\r\n        body: img,\r\n        headers: {\r\n            'Accept': '*/*',\r\n            authorization: 'Bearer ' + await AsyncStorage.getItem(TOKEN_KEY)\r\n        }\r\n    })\r\n        .then(handleErrors)\r\n        .then(() => id)\r\n        .catch(err => console.error(err));\r\n}\r\n\r\nasync function mudarStatus(id: number, idStatus: number): Promise<Promise<void>> {\r\n\r\n        fetch(API_URL + CONTROLLER + `Status?id=${id}&idStatus=${idStatus}`, {\r\n        method: \"PUT\",\r\n        headers: {\r\n            'content-type': 'application/json',\r\n            authorization: 'Bearer ' + await AsyncStorage.getItem(TOKEN_KEY)\r\n        }\r\n    })\r\n        .then(handleErrors)\r\n        .catch(err => console.error(err));\r\n}\r\n\r\nexport default {listar, buscarPorId: listarPorStatus, salvar, mudarStatus}"]},"metadata":{},"sourceType":"module"}