{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { API_URL, handleErrors, TOKEN_KEY } from \"./apisettings\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nvar CONTROLLER = \"Candidatura/\";\n\nfunction listar() {\n  return _regeneratorRuntime.async(function listar$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.t0 = fetch;\n          _context.t1 = API_URL + CONTROLLER;\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(AsyncStorage.getItem(TOKEN_KEY));\n\n        case 4:\n          _context.t2 = _context.sent;\n          _context.t3 = 'Bearer ' + _context.t2;\n          _context.t4 = {\n            authorization: _context.t3\n          };\n          _context.t5 = {\n            method: \"GET\",\n            headers: _context.t4\n          };\n          return _context.abrupt(\"return\", (0, _context.t0)(_context.t1, _context.t5).then(handleErrors).then(function (response) {\n            return response.json();\n          }).catch(function (err) {\n            return console.error(err);\n          }));\n\n        case 9:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction buscarPorId(id) {\n  return _regeneratorRuntime.async(function buscarPorId$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.t0 = fetch;\n          _context2.t1 = API_URL + CONTROLLER + id;\n          _context2.next = 4;\n          return _regeneratorRuntime.awrap(AsyncStorage.getItem(TOKEN_KEY));\n\n        case 4:\n          _context2.t2 = _context2.sent;\n          _context2.t3 = 'Bearer ' + _context2.t2;\n          _context2.t4 = {\n            authorization: _context2.t3\n          };\n          _context2.t5 = {\n            method: \"GET\",\n            headers: _context2.t4\n          };\n          return _context2.abrupt(\"return\", (0, _context2.t0)(_context2.t1, _context2.t5).then(handleErrors).then(function (response) {\n            return response.json();\n          }).catch(function (err) {\n            return console.error(err);\n          }));\n\n        case 9:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction listarPorVaga(id) {\n  return _regeneratorRuntime.async(function listarPorVaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          return _context3.abrupt(\"return\", listar().then(function (candidaturas) {\n            return candidaturas.filter(function (candidatura) {\n              return candidatura.idVaga == id;\n            });\n          }));\n\n        case 1:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction salvar(candidatura, id) {\n  var method, urlRequest;\n  return _regeneratorRuntime.async(function salvar$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          method = id === 0 ? 'POST' : 'PUT';\n          urlRequest = id === 0 ? API_URL + CONTROLLER : API_URL + CONTROLLER + id;\n          _context4.t0 = fetch;\n          _context4.t1 = urlRequest;\n          _context4.t2 = method;\n          _context4.t3 = JSON.stringify(candidatura);\n          _context4.next = 8;\n          return _regeneratorRuntime.awrap(AsyncStorage.getItem(TOKEN_KEY));\n\n        case 8:\n          _context4.t4 = _context4.sent;\n          _context4.t5 = 'Bearer ' + _context4.t4;\n          _context4.t6 = {\n            'content-type': 'application/json',\n            authorization: _context4.t5\n          };\n          _context4.t7 = {\n            method: _context4.t2,\n            body: _context4.t3,\n            headers: _context4.t6\n          };\n          return _context4.abrupt(\"return\", (0, _context4.t0)(_context4.t1, _context4.t7).then(handleErrors).then(function () {\n            return candidatura;\n          }).catch(function (err) {\n            return console.error(err);\n          }));\n\n        case 13:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexport default {\n  listar: listar,\n  buscarPorId: buscarPorId,\n  listarPorVaga: listarPorVaga,\n  salvar: salvar\n};","map":{"version":3,"sources":["C:/Users/Matheus/Documentos/Projetos/Programacao/React Native/ConexaoVagas-App/api/candidatura.ts"],"names":["API_URL","handleErrors","TOKEN_KEY","AsyncStorage","CONTROLLER","listar","fetch","getItem","authorization","method","headers","then","response","json","catch","err","console","error","buscarPorId","id","listarPorVaga","candidaturas","filter","candidatura","idVaga","salvar","urlRequest","JSON","stringify","body"],"mappings":"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","sourcesContent":["import { Candidatura } from \"../models/candidatura\";\r\nimport { API_URL, handleErrors, TOKEN_KEY } from \"./apisettings\";\r\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\r\n\r\nconst CONTROLLER = \"Candidatura/\";\r\n\r\n/**\r\n * Lista as candidaturas.\r\n */\r\nasync function listar(): Promise<Candidatura[]> {\r\n    return fetch(API_URL + CONTROLLER, {\r\n        method: \"GET\",\r\n        headers: {\r\n            authorization: 'Bearer ' + await AsyncStorage.getItem(TOKEN_KEY)\r\n        }\r\n    })\r\n        .then(handleErrors)\r\n        .then(response => {\r\n            return response.json();\r\n        })\r\n        .catch(err => console.error(err));\r\n}\r\n\r\n/**\r\n * \r\n * @param id ID da candidatura\r\n * @returns A candidatura buscada\r\n */\r\nasync function buscarPorId(id: number): Promise<Candidatura> {\r\n    // http://localhost:5000/api/Candidatura/5\r\n    return fetch(API_URL + CONTROLLER + id, {\r\n        method: \"GET\",\r\n        headers: {\r\n            authorization: 'Bearer ' + await AsyncStorage.getItem(TOKEN_KEY)\r\n        }\r\n    })\r\n        .then(handleErrors)\r\n        .then(response => {\r\n            return response.json();\r\n        })\r\n        .catch(err => console.error(err));\r\n}\r\n/**\r\n * \r\n * @param id ID da vaga\r\n */\r\nasync function listarPorVaga(id: number ): Promise<Candidatura[]> {\r\n    return listar().then(candidaturas => {\r\n        return candidaturas.filter(candidatura => candidatura.idVaga == id)\r\n    })\r\n}\r\n/**\r\n * \r\n * @param empresa Objeto candidatura a ser adicionada/atualizada.\r\n * @param id ID do candidatura a ser atualizada.  O valor é 0 quando apenas quer adicionar.\r\n * @returns Objeto candidatura se a operação for feita com sucesso, caso contrário retorno nada.\r\n */\r\nasync function salvar(candidatura: Candidatura, id: number): Promise<Candidatura> {\r\n\r\n    const method = (id === 0 ? 'POST' : 'PUT');\r\n    const urlRequest = (id === 0 ? API_URL + CONTROLLER : API_URL + CONTROLLER + id);\r\n\r\n    return fetch(urlRequest, {\r\n        method: method,\r\n        body: JSON.stringify(candidatura),\r\n        headers: {\r\n            'content-type': 'application/json',\r\n            authorization: 'Bearer ' + await AsyncStorage.getItem(TOKEN_KEY)\r\n        }\r\n    })\r\n        .then(handleErrors)\r\n        .then(() => {\r\n            return candidatura as any;\r\n        })\r\n        .catch(err => console.error(err));\r\n}\r\n\r\nexport default {listar, buscarPorId, listarPorVaga, salvar}"]},"metadata":{},"sourceType":"module"}