{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Matheus\\\\Documentos\\\\Projetos\\\\Programacao\\\\React Native\\\\ConexaoVagas-App\\\\screens\\\\login.tsx\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { useNavigation } from '@react-navigation/native';\nimport React, { useEffect, useState } from 'react';\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport tailwind from 'tailwind-rn';\nimport { API_URL, TOKEN_KEY } from \"../api/apisettings\";\nimport { parseJwt } from \"../services/auth\";\nimport { KeyboardAwareScrollView } from 'react-native-keyboard-aware-scroll-view';\nexport default function Login() {\n  var navigation = useNavigation();\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      validEmail = _useState2[0],\n      setvalidEmail = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      email = _useState4[0],\n      setEmail = _useState4[1];\n\n  var _useState5 = useState(''),\n      _useState6 = _slicedToArray(_useState5, 2),\n      senha = _useState6[0],\n      setSenha = _useState6[1];\n\n  useEffect(function () {\n    isEmailValid();\n  }, [email]);\n\n  function isEmailValid() {\n    var pattern = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    setvalidEmail(pattern.test(String(email).toLowerCase()));\n  }\n\n  var fazerLogin = function fazerLogin() {\n    var form = {\n      email: email,\n      senha: senha\n    };\n    fetch(API_URL + 'Login', {\n      method: 'POST',\n      body: JSON.stringify(form),\n      headers: {\n        'content-type': 'application/json'\n      }\n    }).then(function (response) {\n      if (!response.ok) {\n        Alert.alert(\"Login\", \"Email ou senha inv√°lidos.\", [{\n          text: \"OK\"\n        }], {\n          cancelable: false\n        });\n      } else return response.json();\n    }).then(function (dados) {\n      if (dados.token !== undefined) {\n        AsyncStorage.setItem(TOKEN_KEY, dados.token);\n        var jwt = parseJwt(dados.token);\n        navigation.navigate(\"Master\");\n      }\n    }).catch(function (error) {\n      return console.error(error);\n    });\n  };\n\n  return React.createElement(KeyboardAwareScrollView, {\n    style: styles.body,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  }, React.createElement(ImageBackground, {\n    source: require(\"../assets/imgs/imagem.jpg\"),\n    style: styles.background,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }\n  }, React.createElement(Image, {\n    source: require(\"../assets/imgs/logo-dark.png\"),\n    style: styles.logo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 17\n    }\n  }), React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 17\n    }\n  }, React.createElement(View, {\n    style: styles.form,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 21\n    }\n  }, React.createElement(View, {\n    style: styles.inputField,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 25\n    }\n  }, React.createElement(Text, {\n    style: styles.inputTitle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 29\n    }\n  }, \"Digite seu email\"), React.createElement(TextInput, {\n    style: tailwind('h-10 text-sm mx-1'),\n    textContentType: \"emailAddress\",\n    onChangeText: function onChangeText(e) {\n      setEmail(e);\n    },\n    value: email,\n    placeholder: \"Insira seu email\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 29\n    }\n  })), React.createElement(View, {\n    style: styles.inputField,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 25\n    }\n  }, React.createElement(Text, {\n    style: styles.inputTitle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 29\n    }\n  }, \"Digite sua senha\"), React.createElement(TextInput, {\n    style: tailwind('h-10 text-sm mx-1'),\n    secureTextEntry: true,\n    onChangeText: function onChangeText(e) {\n      return setSenha(e);\n    },\n    value: senha,\n    placeholder: \"Insira sua senha\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 29\n    }\n  })), React.createElement(View, {\n    style: styles.buttonLogin,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 25\n    }\n  }, React.createElement(Button, {\n    disabled: !validEmail || senha.length == 0,\n    title: \"Login\",\n    color: \"#CD322B\",\n    onPress: fazerLogin,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 29\n    }\n  }))))));\n}\nvar styles = StyleSheet.create({\n  background: {\n    flex: 1,\n    height: '100%',\n    resizeMode: 'cover',\n    justifyContent: 'center'\n  },\n  body: {\n    flex: 1,\n    flexDirection: \"column\"\n  },\n  logo: {\n    height: 200,\n    width: '100%',\n    maxWidth: 500,\n    alignSelf: 'center'\n  },\n  input: {\n    width: '80%',\n    height: 40\n  },\n  form: {\n    backgroundColor: 'white',\n    width: '80%',\n    alignSelf: 'center',\n    padding: 20,\n    borderRadius: 5,\n    marginTop: '5%',\n    marginBottom: '30%'\n  },\n  inputField: {\n    marginBottom: '8%',\n    borderBottomColor: '#000',\n    borderBottomWidth: 1\n  },\n  inputTitle: {\n    fontSize: 25,\n    fontWeight: \"700\"\n  },\n  buttonLogin: {\n    width: 100,\n    alignSelf: 'center',\n    marginTop: 20\n  }\n});","map":{"version":3,"sources":["C:/Users/Matheus/Documentos/Projetos/Programacao/React Native/ConexaoVagas-App/screens/login.tsx"],"names":["AsyncStorage","useNavigation","React","useEffect","useState","tailwind","API_URL","TOKEN_KEY","parseJwt","KeyboardAwareScrollView","Login","navigation","validEmail","setvalidEmail","email","setEmail","senha","setSenha","isEmailValid","pattern","test","String","toLowerCase","fazerLogin","form","fetch","method","body","JSON","stringify","headers","then","response","ok","Alert","alert","text","cancelable","json","dados","token","undefined","setItem","jwt","navigate","catch","error","console","styles","require","background","logo","inputField","inputTitle","e","buttonLogin","length","StyleSheet","create","flex","height","resizeMode","justifyContent","flexDirection","width","maxWidth","alignSelf","input","backgroundColor","padding","borderRadius","marginTop","marginBottom","borderBottomColor","borderBottomWidth","fontSize","fontWeight"],"mappings":"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","sourcesContent":["import AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport { useNavigation } from '@react-navigation/native';\r\nimport React, { useEffect, useState } from 'react'\r\nimport { ImageBackground, Image, StyleSheet, Text, TextInput, View, Button, Alert } from 'react-native'\r\nimport tailwind from 'tailwind-rn'\r\nimport { API_URL, TOKEN_KEY } from '../api/apisettings';\r\nimport { parseJwt } from '../services/auth';\r\nimport { TipoUsuario } from '../utils/enums';\r\nimport { KeyboardAwareScrollView } from 'react-native-keyboard-aware-scroll-view'\r\n\r\n\r\n\r\nexport default function Login() {\r\n\r\n\r\n    let navigation = useNavigation();\r\n\r\n    const [validEmail, setvalidEmail] = useState(false);\r\n    const [email, setEmail] = useState('');\r\n    const [senha, setSenha] = useState('');\r\n\r\n    useEffect(() => {\r\n        isEmailValid();\r\n    }, [email])\r\n\r\n    function isEmailValid() {\r\n        let pattern = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\r\n        setvalidEmail(pattern.test(String(email).toLowerCase())\r\n        )\r\n    }\r\n    \r\n    const fazerLogin = () => {\r\n        const form = {\r\n            email: email,\r\n            senha: senha\r\n        }\r\n\r\n        fetch(API_URL + 'Login', {\r\n            method: 'POST',\r\n            body: JSON.stringify(form),\r\n            headers: {\r\n                'content-type': 'application/json'\r\n            }\r\n        })\r\n            .then(response => {\r\n                if (!response.ok) {\r\n                    Alert.alert(\r\n                        \"Login\",\r\n                        \"Email ou senha inv√°lidos.\",\r\n                        [\r\n                          { text: \"OK\" }\r\n                        ],\r\n                        { cancelable: false }\r\n                      );\r\n                }\r\n                else return response.json()\r\n            })\r\n            .then(dados => {\r\n                if (dados.token !== undefined) {\r\n                    AsyncStorage.setItem(TOKEN_KEY, dados.token);\r\n                    let jwt = parseJwt(dados.token);\r\n                    navigation.navigate(\"Master\");\r\n                }\r\n            })\r\n            .catch(error => console.error(error))\r\n    }\r\n\r\n    return (\r\n        // KeyboardAwareScrollView permite scroll al clicar em um input.\r\n        <KeyboardAwareScrollView style={styles.body}>\r\n            <ImageBackground source={require('../assets/imgs/imagem.jpg')} style={styles.background}>\r\n                <Image source={require('../assets/imgs/logo-dark.png')} style={styles.logo as any}/>\r\n                <View>\r\n                    <View style={styles.form}>\r\n                        <View style={styles.inputField}>\r\n                            <Text style={styles.inputTitle}>Digite seu email</Text>\r\n                            <TextInput\r\n                                style={tailwind('h-10 text-sm mx-1')}\r\n                                textContentType=\"emailAddress\"\r\n                                onChangeText={e => {\r\n                                    setEmail(e);\r\n                                }} value={email}\r\n                                placeholder=\"Insira seu email\" />\r\n                        </View>\r\n                        <View style={styles.inputField}>\r\n                            <Text style={styles.inputTitle}>Digite sua senha</Text>\r\n                            <TextInput\r\n                                style={tailwind('h-10 text-sm mx-1')}\r\n                                secureTextEntry={true}\r\n                                onChangeText={e => setSenha(e)} value={senha}\r\n                                placeholder=\"Insira sua senha\" />\r\n                        </View>\r\n                        <View style={styles.buttonLogin}>\r\n                            <Button\r\n                                disabled={!validEmail || senha.length == 0}\r\n                                title='Login'\r\n                                color='#CD322B'\r\n                                onPress={fazerLogin}\r\n                            />\r\n                        </View>\r\n                    </View>\r\n                </View>\r\n            </ImageBackground>\r\n        </KeyboardAwareScrollView>\r\n    )\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    \r\n    background: {\r\n        flex: 1,\r\n        height: '100%',\r\n        resizeMode: 'cover',\r\n        justifyContent: 'center',\r\n    },\r\n    // flex: 1 j√° cobre a tela inteira, n√£o precisa de width ou height;\r\n    body: {\r\n        flex: 1,\r\n        flexDirection: \"column\"\r\n    },\r\n    logo: {\r\n        height: 200,\r\n        width: '100%',\r\n        maxWidth: 500,\r\n        alignSelf: 'center'\r\n    },\r\n    input: {\r\n        width: '80%',\r\n        height: 40\r\n    },\r\n    form: {\r\n        backgroundColor: 'white',\r\n        width: '80%',\r\n        alignSelf: 'center',\r\n        padding: 20,\r\n        borderRadius: 5,\r\n        marginTop: '5%',\r\n        marginBottom: '30%'\r\n\r\n    },\r\n    inputField: {\r\n        marginBottom: '8%',\r\n        borderBottomColor: '#000',\r\n        borderBottomWidth: 1\r\n        // textDecorationLine: \"underline\",\r\n        // textDecorationStyle: \"solid\",\r\n        // textDecorationColor: \"#000\",\r\n    },\r\n    inputTitle: {\r\n        fontSize: 25,\r\n        fontWeight: \"700\",\r\n    },\r\n    buttonLogin: {\r\n        width: 100,\r\n        alignSelf: 'center',\r\n        marginTop: 20\r\n\r\n    }\r\n})\r\n"]},"metadata":{},"sourceType":"module"}