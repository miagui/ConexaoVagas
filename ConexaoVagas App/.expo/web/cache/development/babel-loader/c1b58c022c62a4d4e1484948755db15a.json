{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { API_URL, handleErrors, TOKEN_KEY } from \"./apisettings\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport MatchesApi from \"../api/matching\";\nvar CONTROLLER = \"Vaga/\";\n\nfunction listar() {\n  return _regeneratorRuntime.async(function listar$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.t0 = fetch;\n          _context.t1 = API_URL + CONTROLLER;\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(AsyncStorage.getItem(TOKEN_KEY));\n\n        case 4:\n          _context.t2 = _context.sent;\n          _context.t3 = 'Bearer ' + _context.t2;\n          _context.t4 = {\n            authorization: _context.t3\n          };\n          _context.t5 = {\n            method: \"GET\",\n            headers: _context.t4\n          };\n          return _context.abrupt(\"return\", (0, _context.t0)(_context.t1, _context.t5).then(handleErrors).then(function (response) {\n            return response.json();\n          }).catch(function (err) {\n            return console.error(err);\n          }));\n\n        case 9:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction buscarPorId(id) {\n  return _regeneratorRuntime.async(function buscarPorId$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.t0 = fetch;\n          _context2.t1 = API_URL + CONTROLLER + id;\n          _context2.next = 4;\n          return _regeneratorRuntime.awrap(AsyncStorage.getItem(TOKEN_KEY));\n\n        case 4:\n          _context2.t2 = _context2.sent;\n          _context2.t3 = 'Bearer ' + _context2.t2;\n          _context2.t4 = {\n            authorization: _context2.t3\n          };\n          _context2.t5 = {\n            method: \"GET\",\n            headers: _context2.t4\n          };\n          return _context2.abrupt(\"return\", (0, _context2.t0)(_context2.t1, _context2.t5).then(handleErrors).then(function (response) {\n            return response.json();\n          }).catch(function (err) {\n            return console.error(err);\n          }));\n\n        case 9:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction listarPorEmpresa(id) {\n  return _regeneratorRuntime.async(function listarPorEmpresa$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.t0 = fetch;\n          _context3.t1 = API_URL + CONTROLLER + (\"Empresa/\" + id);\n          _context3.next = 4;\n          return _regeneratorRuntime.awrap(AsyncStorage.getItem(TOKEN_KEY));\n\n        case 4:\n          _context3.t2 = _context3.sent;\n          _context3.t3 = 'Bearer ' + _context3.t2;\n          _context3.t4 = {\n            authorization: _context3.t3\n          };\n          _context3.t5 = {\n            method: \"GET\",\n            headers: _context3.t4\n          };\n          return _context3.abrupt(\"return\", (0, _context3.t0)(_context3.t1, _context3.t5).then(handleErrors).then(function (response) {\n            return response.json();\n          }).catch(function (err) {\n            return console.error(err);\n          }));\n\n        case 9:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction listarPorFiltro(titulo, minSalario, idHabilidade) {\n  var filtro;\n  return _regeneratorRuntime.async(function listarPorFiltro$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          filtro = \"Filtro?titulo=\" + titulo + \"&minSalario=\" + minSalario + \"&id=\" + idHabilidade;\n          _context4.t0 = fetch;\n          _context4.t1 = API_URL + CONTROLLER + filtro;\n          _context4.next = 5;\n          return _regeneratorRuntime.awrap(AsyncStorage.getItem(TOKEN_KEY));\n\n        case 5:\n          _context4.t2 = _context4.sent;\n          _context4.t3 = 'Bearer ' + _context4.t2;\n          _context4.t4 = {\n            authorization: _context4.t3\n          };\n          _context4.t5 = {\n            method: \"GET\",\n            headers: _context4.t4\n          };\n          return _context4.abrupt(\"return\", (0, _context4.t0)(_context4.t1, _context4.t5).then(handleErrors).then(function (response) {\n            return response.json();\n          }).catch(function (err) {\n            return console.error(err);\n          }));\n\n        case 10:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction salvar(vaga, id) {\n  var method, urlRequest;\n  return _regeneratorRuntime.async(function salvar$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          method = id === 0 ? 'POST' : 'PUT';\n          urlRequest = id === 0 ? API_URL + CONTROLLER : API_URL + CONTROLLER + id;\n          _context5.t0 = fetch;\n          _context5.t1 = urlRequest;\n          _context5.t2 = method;\n          _context5.t3 = JSON.stringify(vaga);\n          _context5.next = 8;\n          return _regeneratorRuntime.awrap(AsyncStorage.getItem(TOKEN_KEY));\n\n        case 8:\n          _context5.t4 = _context5.sent;\n          _context5.t5 = 'Bearer ' + _context5.t4;\n          _context5.t6 = {\n            'content-type': 'application/json',\n            authorization: _context5.t5\n          };\n          _context5.t7 = {\n            method: _context5.t2,\n            body: _context5.t3,\n            headers: _context5.t6\n          };\n          return _context5.abrupt(\"return\", (0, _context5.t0)(_context5.t1, _context5.t7).then(handleErrors).then(function () {\n            MatchesApi.atualizar();\n            return vaga;\n          }).catch(function (err) {\n            return console.error(err);\n          }));\n\n        case 13:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction deletar(id) {\n  return _regeneratorRuntime.async(function deletar$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.t0 = fetch;\n          _context6.t1 = API_URL + CONTROLLER + id;\n          _context6.next = 4;\n          return _regeneratorRuntime.awrap(AsyncStorage.getItem(TOKEN_KEY));\n\n        case 4:\n          _context6.t2 = _context6.sent;\n          _context6.t3 = 'Bearer ' + _context6.t2;\n          _context6.t4 = {\n            authorization: _context6.t3\n          };\n          _context6.t5 = {\n            method: 'DELETE',\n            headers: _context6.t4\n          };\n          (0, _context6.t0)(_context6.t1, _context6.t5).then(handleErrors).then(function (response) {\n            return response.json();\n          }).catch(function (err) {\n            return console.error(err);\n          });\n\n        case 9:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexport default {\n  listar: listar,\n  listarPorEmpresa: listarPorEmpresa,\n  listarPorFiltro: listarPorFiltro,\n  buscarPorId: buscarPorId,\n  salvar: salvar,\n  deletar: deletar\n};","map":{"version":3,"sources":["C:/Users/Matheus/Documentos/Projetos/Programacao/React Native/ConexaoVagas-App/api/vagas.ts"],"names":["API_URL","handleErrors","TOKEN_KEY","AsyncStorage","MatchesApi","CONTROLLER","listar","fetch","getItem","authorization","method","headers","then","response","json","catch","err","console","error","buscarPorId","id","listarPorEmpresa","listarPorFiltro","titulo","minSalario","idHabilidade","filtro","salvar","vaga","urlRequest","JSON","stringify","body","atualizar","deletar"],"mappings":"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","sourcesContent":["import { Vaga } from \"../models/vaga\";\r\nimport { API_URL, handleErrors, TOKEN_KEY } from \"./apisettings\";\r\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\r\nimport MatchesApi from \"../api/matching\";\r\n\r\nconst CONTROLLER = \"Vaga/\";\r\n\r\n/**\r\n * Lista os vagas.\r\n */\r\nasync function listar(): Promise<Vaga[]> {\r\n    return fetch(API_URL + CONTROLLER, {\r\n        method: \"GET\",\r\n        headers: {\r\n            authorization: 'Bearer ' + await AsyncStorage.getItem(TOKEN_KEY)\r\n        }\r\n    })\r\n        .then(handleErrors)\r\n        .then(response => {\r\n            return response.json();\r\n        })\r\n        .catch(err => console.error(err));\r\n}\r\n\r\n/**\r\n * \r\n * @param id ID do vaga\r\n * @returns O vaga buscado.\r\n */\r\nasync function buscarPorId(id: number): Promise<Vaga> {\r\n    return fetch(API_URL + CONTROLLER + id, {\r\n        method: \"GET\",\r\n        headers: {\r\n            authorization: 'Bearer ' + await AsyncStorage.getItem(TOKEN_KEY)\r\n        }\r\n    })\r\n        .then(handleErrors)\r\n        .then(response => {\r\n            return response.json();\r\n        })\r\n        .catch(err => console.error(err));\r\n}\r\n\r\n/**\r\n * \r\n * @param id ID da empresa.\r\n */\r\nasync function listarPorEmpresa(id: number): Promise<Vaga[]> {\r\n    return fetch(API_URL + CONTROLLER + `Empresa/${id}`, {\r\n        method: \"GET\",\r\n        headers: {\r\n            authorization: 'Bearer ' + await AsyncStorage.getItem(TOKEN_KEY)\r\n        }\r\n    })\r\n        .then(handleErrors)\r\n        .then(response => {\r\n            return response.json();\r\n        })\r\n        .catch(err => console.error(err));\r\n}\r\n/**\r\n * \r\n * @param titulo Nome da vaga\r\n * @param minSalario Salário mínimo\r\n * @param idHabilidade ID da habilidade relacionada\r\n */\r\nasync function listarPorFiltro(titulo: string, minSalario: number, idHabilidade: number): Promise<Vaga[]> {\r\n    var filtro: string = `Filtro?titulo=${titulo}&minSalario=${minSalario}&id=${idHabilidade}`\r\n\r\n    return fetch(API_URL + CONTROLLER + filtro, {\r\n        method: \"GET\",\r\n        headers: {\r\n            authorization: 'Bearer ' + await AsyncStorage.getItem(TOKEN_KEY)\r\n        }\r\n    })\r\n        .then(handleErrors)\r\n        .then(response => {\r\n            return response.json();\r\n        })\r\n        .catch(err => console.error(err));\r\n}\r\n\r\n/**\r\n * \r\n * @param vaga Objeto vaga a ser adicionado/atualizado.\r\n * @param id ID do vaga a ser atualizado.  O valor é 0 quando apenas quer adicionar.\r\n * @returns Objeto vaga se a operação for feita com sucesso, caso contrário retorno nada.\r\n */\r\nasync function salvar(vaga: Vaga, id: number): Promise<Vaga> {\r\n\r\n    const method = (id === 0 ? 'POST' : 'PUT');\r\n    const urlRequest = (id === 0 ? API_URL + CONTROLLER : API_URL + CONTROLLER + id);\r\n    return fetch(urlRequest, {\r\n        method: method,\r\n        body: JSON.stringify(vaga),\r\n        headers: {\r\n            'content-type': 'application/json',\r\n            authorization: 'Bearer ' + await AsyncStorage.getItem(TOKEN_KEY)\r\n        }\r\n    })\r\n        .then(handleErrors)\r\n        .then(() => {\r\n            MatchesApi.atualizar();\r\n            return vaga as any;\r\n        })\r\n        .catch(err => console.error(err));\r\n}\r\n\r\n/**\r\n * Deleta uma vaga.\r\n * @param id ID da vaga\r\n */\r\nasync function deletar(id: number): Promise<void> {\r\n    fetch(API_URL + CONTROLLER + id, {\r\n        method: 'DELETE',\r\n        headers: {\r\n            authorization: 'Bearer ' + await AsyncStorage.getItem(TOKEN_KEY)\r\n        }\r\n    })\r\n        .then(handleErrors)\r\n        .then(response => response.json())\r\n        .catch(err => console.error(err));\r\n}\r\n\r\nexport default {listar, listarPorEmpresa, listarPorFiltro, buscarPorId, salvar, deletar}"]},"metadata":{},"sourceType":"module"}