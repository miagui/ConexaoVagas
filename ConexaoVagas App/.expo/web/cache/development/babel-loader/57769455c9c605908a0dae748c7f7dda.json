{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nexport var camelCase = function camelCase(value) {\n  return value.replace(/-([a-z])/g, function (g) {\n    return g[1].toUpperCase();\n  });\n};\nexport var camelCaseNodeName = function camelCaseNodeName(_ref) {\n  var nodeName = _ref.nodeName,\n      nodeValue = _ref.nodeValue;\n  return {\n    nodeName: camelCase(nodeName),\n    nodeValue: nodeValue\n  };\n};\nexport var removePixelsFromNodeValue = function removePixelsFromNodeValue(_ref2) {\n  var nodeName = _ref2.nodeName,\n      nodeValue = _ref2.nodeValue;\n  return {\n    nodeName: nodeName,\n    nodeValue: nodeValue.replace('px', '')\n  };\n};\nexport var transformStyle = function transformStyle(_ref3) {\n  var nodeName = _ref3.nodeName,\n      nodeValue = _ref3.nodeValue,\n      fillProp = _ref3.fillProp;\n\n  if (nodeName === 'style') {\n    return nodeValue.split(';').reduce(function (acc, attribute) {\n      var _attribute$split = attribute.split(':'),\n          _attribute$split2 = _slicedToArray(_attribute$split, 2),\n          property = _attribute$split2[0],\n          value = _attribute$split2[1];\n\n      if (property == \"\") return acc;else return _objectSpread(_objectSpread({}, acc), {}, _defineProperty({}, camelCase(property), fillProp && property === 'fill' ? fillProp : value));\n    }, {});\n  }\n\n  return null;\n};\nexport var getEnabledAttributes = function getEnabledAttributes(enabledAttributes) {\n  return function (_ref4) {\n    var nodeName = _ref4.nodeName;\n    return enabledAttributes.includes(camelCase(nodeName));\n  };\n};","map":{"version":3,"sources":["C:/Users/Matheus/Documentos/Projetos/Programacao/React Native/ConexaoVagas-App/node_modules/react-native-svg-uri/utils.js"],"names":["camelCase","value","replace","g","toUpperCase","camelCaseNodeName","nodeName","nodeValue","removePixelsFromNodeValue","transformStyle","fillProp","split","reduce","acc","attribute","property","getEnabledAttributes","enabledAttributes","includes"],"mappings":";;;;;;;AAAA,OAAO,IAAMA,SAAS,GAAG,SAAZA,SAAY,CAAAC,KAAK;AAAA,SAAIA,KAAK,CAACC,OAAN,CAAc,WAAd,EAA2B,UAAAC,CAAC;AAAA,WAAIA,CAAC,CAAC,CAAD,CAAD,CAAKC,WAAL,EAAJ;AAAA,GAA5B,CAAJ;AAAA,CAAvB;AAEP,OAAO,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB;AAAA,MAAEC,QAAF,QAAEA,QAAF;AAAA,MAAYC,SAAZ,QAAYA,SAAZ;AAAA,SAA4B;AAACD,IAAAA,QAAQ,EAAEN,SAAS,CAACM,QAAD,CAApB;AAAgCC,IAAAA,SAAS,EAATA;AAAhC,GAA5B;AAAA,CAA1B;AAEP,OAAO,IAAMC,yBAAyB,GAAG,SAA5BA,yBAA4B;AAAA,MAAEF,QAAF,SAAEA,QAAF;AAAA,MAAYC,SAAZ,SAAYA,SAAZ;AAAA,SAA4B;AAACD,IAAAA,QAAQ,EAARA,QAAD;AAAWC,IAAAA,SAAS,EAAEA,SAAS,CAACL,OAAV,CAAkB,IAAlB,EAAwB,EAAxB;AAAtB,GAA5B;AAAA,CAAlC;AAEP,OAAO,IAAMO,cAAc,GAAG,SAAjBA,cAAiB,QAAqC;AAAA,MAAnCH,QAAmC,SAAnCA,QAAmC;AAAA,MAAzBC,SAAyB,SAAzBA,SAAyB;AAAA,MAAdG,QAAc,SAAdA,QAAc;;AACjE,MAAIJ,QAAQ,KAAK,OAAjB,EAA0B;AACxB,WAAOC,SAAS,CAACI,KAAV,CAAgB,GAAhB,EACJC,MADI,CACG,UAACC,GAAD,EAAMC,SAAN,EAAoB;AAAA,6BACAA,SAAS,CAACH,KAAV,CAAgB,GAAhB,CADA;AAAA;AAAA,UACnBI,QADmB;AAAA,UACTd,KADS;;AAE1B,UAAIc,QAAQ,IAAI,EAAhB,EACI,OAAOF,GAAP,CADJ,KAGI,uCAAWA,GAAX,2BAAiBb,SAAS,CAACe,QAAD,CAA1B,EAAuCL,QAAQ,IAAIK,QAAQ,KAAK,MAAzB,GAAkCL,QAAlC,GAA6CT,KAApF;AACL,KAPI,EAOF,EAPE,CAAP;AAQD;;AACD,SAAO,IAAP;AACD,CAZM;AAcP,OAAO,IAAMe,oBAAoB,GAAG,SAAvBA,oBAAuB,CAAAC,iBAAiB;AAAA,SAAI;AAAA,QAAEX,QAAF,SAAEA,QAAF;AAAA,WAAgBW,iBAAiB,CAACC,QAAlB,CAA2BlB,SAAS,CAACM,QAAD,CAApC,CAAhB;AAAA,GAAJ;AAAA,CAA9C","sourcesContent":["export const camelCase = value => value.replace(/-([a-z])/g, g => g[1].toUpperCase());\n\nexport const camelCaseNodeName = ({nodeName, nodeValue}) => ({nodeName: camelCase(nodeName), nodeValue});\n\nexport const removePixelsFromNodeValue = ({nodeName, nodeValue}) => ({nodeName, nodeValue: nodeValue.replace('px', '')});\n\nexport const transformStyle = ({nodeName, nodeValue, fillProp}) => {\n  if (nodeName === 'style') {\n    return nodeValue.split(';')\n      .reduce((acc, attribute) => {\n        const [property, value] = attribute.split(':');\n        if (property == \"\")\n            return acc;\n        else\n            return {...acc, [camelCase(property)]: fillProp && property === 'fill' ? fillProp : value};\n      }, {});\n  }\n  return null;\n};\n\nexport const getEnabledAttributes = enabledAttributes => ({nodeName}) => enabledAttributes.includes(camelCase(nodeName));\n"]},"metadata":{},"sourceType":"module"}