{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\Matheus\\\\Documentos\\\\Projetos\\\\Programacao\\\\React Native\\\\ConexaoVagas-App\\\\node_modules\\\\react-native-svg-uri\\\\index.js\";\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } it = o[Symbol.iterator](); return it.next.bind(it); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport PropTypes from 'prop-types';\nimport xmldom from 'xmldom';\nimport resolveAssetSource from 'react-native/Libraries/Image/resolveAssetSource';\nimport Svg, { Circle, Ellipse, G, LinearGradient, RadialGradient, Line, Path, Polygon, Polyline, Rect, Text, TSpan, Defs, Stop } from 'react-native-svg';\nimport * as utils from \"./utils\";\nvar ACCEPTED_SVG_ELEMENTS = ['svg', 'g', 'circle', 'path', 'rect', 'defs', 'line', 'linearGradient', 'radialGradient', 'stop', 'ellipse', 'polygon', 'polyline', 'text', 'tspan'];\nvar SVG_ATTS = ['viewBox', 'width', 'height'];\nvar G_ATTS = ['id'];\nvar CIRCLE_ATTS = ['cx', 'cy', 'r'];\nvar PATH_ATTS = ['d'];\nvar RECT_ATTS = ['width', 'height'];\nvar LINE_ATTS = ['x1', 'y1', 'x2', 'y2'];\nvar LINEARG_ATTS = LINE_ATTS.concat(['id', 'gradientUnits']);\nvar RADIALG_ATTS = CIRCLE_ATTS.concat(['id', 'gradientUnits']);\nvar STOP_ATTS = ['offset'];\nvar ELLIPSE_ATTS = ['cx', 'cy', 'rx', 'ry'];\nvar TEXT_ATTS = ['fontFamily', 'fontSize', 'fontWeight'];\nvar POLYGON_ATTS = ['points'];\nvar POLYLINE_ATTS = ['points'];\nvar COMMON_ATTS = ['fill', 'fillOpacity', 'stroke', 'strokeWidth', 'strokeOpacity', 'opacity', 'strokeLinecap', 'strokeLinejoin', 'strokeDasharray', 'strokeDashoffset', 'x', 'y', 'rotate', 'scale', 'origin', 'originX', 'originY'];\nvar ind = 0;\n\nfunction fixYPosition(y, node) {\n  if (node.attributes) {\n    var fontSizeAttr = Object.keys(node.attributes).find(function (a) {\n      return node.attributes[a].name === 'font-size';\n    });\n\n    if (fontSizeAttr) {\n      return '' + (parseFloat(y) - parseFloat(node.attributes[fontSizeAttr].value));\n    }\n  }\n\n  if (!node.parentNode) {\n    return y;\n  }\n\n  return fixYPosition(y, node.parentNode);\n}\n\nvar SvgUri = function (_Component) {\n  _inherits(SvgUri, _Component);\n\n  var _super = _createSuper(SvgUri);\n\n  function SvgUri(props) {\n    var _this;\n\n    _classCallCheck(this, SvgUri);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      fill: props.fill,\n      svgXmlData: props.svgXmlData\n    };\n    _this.createSVGElement = _this.createSVGElement.bind(_assertThisInitialized(_this));\n    _this.obtainComponentAtts = _this.obtainComponentAtts.bind(_assertThisInitialized(_this));\n    _this.inspectNode = _this.inspectNode.bind(_assertThisInitialized(_this));\n    _this.fetchSVGData = _this.fetchSVGData.bind(_assertThisInitialized(_this));\n    _this.isComponentMounted = false;\n\n    if (props.source) {\n      var source = resolveAssetSource(props.source) || {};\n\n      _this.fetchSVGData(source.uri);\n    }\n\n    return _this;\n  }\n\n  _createClass(SvgUri, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.isComponentMounted = true;\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      if (nextProps.source) {\n        var source = resolveAssetSource(nextProps.source) || {};\n        var oldSource = resolveAssetSource(this.props.source) || {};\n\n        if (source.uri !== oldSource.uri) {\n          this.fetchSVGData(source.uri);\n        }\n      }\n\n      if (nextProps.svgXmlData !== this.props.svgXmlData) {\n        this.setState({\n          svgXmlData: nextProps.svgXmlData\n        });\n      }\n\n      if (nextProps.fill !== this.props.fill) {\n        this.setState({\n          fill: nextProps.fill\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.isComponentMounted = false;\n    }\n  }, {\n    key: \"fetchSVGData\",\n    value: function fetchSVGData(uri) {\n      var responseXML, response;\n      return _regeneratorRuntime.async(function fetchSVGData$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              responseXML = null;\n              _context.prev = 1;\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(fetch(uri));\n\n            case 4:\n              response = _context.sent;\n              _context.next = 7;\n              return _regeneratorRuntime.awrap(response.text());\n\n            case 7:\n              responseXML = _context.sent;\n              _context.next = 13;\n              break;\n\n            case 10:\n              _context.prev = 10;\n              _context.t0 = _context[\"catch\"](1);\n              console.error(\"ERROR SVG\", _context.t0);\n\n            case 13:\n              _context.prev = 13;\n\n              if (this.isComponentMounted) {\n                this.setState({\n                  svgXmlData: responseXML\n                });\n              }\n\n              return _context.finish(13);\n\n            case 16:\n              return _context.abrupt(\"return\", responseXML);\n\n            case 17:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, [[1, 10, 13, 16]], Promise);\n    }\n  }, {\n    key: \"trimElementChilden\",\n    value: function trimElementChilden(children) {\n      for (var _iterator = _createForOfIteratorHelperLoose(children), _step; !(_step = _iterator()).done;) {\n        child = _step.value;\n\n        if (typeof child === 'string') {\n          if (child.trim.length === 0) children.splice(children.indexOf(child), 1);\n        }\n      }\n    }\n  }, {\n    key: \"createSVGElement\",\n    value: function createSVGElement(node, childs) {\n      this.trimElementChilden(childs);\n      var componentAtts = {};\n      var i = ind++;\n\n      switch (node.nodeName) {\n        case 'svg':\n          componentAtts = this.obtainComponentAtts(node, SVG_ATTS);\n\n          if (this.props.width) {\n            componentAtts.width = this.props.width;\n          }\n\n          if (this.props.height) {\n            componentAtts.height = this.props.height;\n          }\n\n          return React.createElement(Svg, _extends({\n            key: i\n          }, componentAtts, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 168,\n              columnNumber: 14\n            }\n          }), childs);\n\n        case 'g':\n          componentAtts = this.obtainComponentAtts(node, G_ATTS);\n          return React.createElement(G, _extends({\n            key: i\n          }, componentAtts, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 171,\n              columnNumber: 14\n            }\n          }), childs);\n\n        case 'path':\n          componentAtts = this.obtainComponentAtts(node, PATH_ATTS);\n          return React.createElement(Path, _extends({\n            key: i\n          }, componentAtts, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 174,\n              columnNumber: 14\n            }\n          }), childs);\n\n        case 'circle':\n          componentAtts = this.obtainComponentAtts(node, CIRCLE_ATTS);\n          return React.createElement(Circle, _extends({\n            key: i\n          }, componentAtts, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 177,\n              columnNumber: 14\n            }\n          }), childs);\n\n        case 'rect':\n          componentAtts = this.obtainComponentAtts(node, RECT_ATTS);\n          return React.createElement(Rect, _extends({\n            key: i\n          }, componentAtts, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 180,\n              columnNumber: 14\n            }\n          }), childs);\n\n        case 'line':\n          componentAtts = this.obtainComponentAtts(node, LINE_ATTS);\n          return React.createElement(Line, _extends({\n            key: i\n          }, componentAtts, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 183,\n              columnNumber: 14\n            }\n          }), childs);\n\n        case 'defs':\n          return React.createElement(Defs, {\n            key: i,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 185,\n              columnNumber: 14\n            }\n          }, childs);\n\n        case 'linearGradient':\n          componentAtts = this.obtainComponentAtts(node, LINEARG_ATTS);\n          return React.createElement(LinearGradient, _extends({\n            key: i\n          }, componentAtts, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 188,\n              columnNumber: 14\n            }\n          }), childs);\n\n        case 'radialGradient':\n          componentAtts = this.obtainComponentAtts(node, RADIALG_ATTS);\n          return React.createElement(RadialGradient, _extends({\n            key: i\n          }, componentAtts, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 191,\n              columnNumber: 14\n            }\n          }), childs);\n\n        case 'stop':\n          componentAtts = this.obtainComponentAtts(node, STOP_ATTS);\n          return React.createElement(Stop, _extends({\n            key: i\n          }, componentAtts, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 194,\n              columnNumber: 14\n            }\n          }), childs);\n\n        case 'ellipse':\n          componentAtts = this.obtainComponentAtts(node, ELLIPSE_ATTS);\n          return React.createElement(Ellipse, _extends({\n            key: i\n          }, componentAtts, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 197,\n              columnNumber: 14\n            }\n          }), childs);\n\n        case 'polygon':\n          componentAtts = this.obtainComponentAtts(node, POLYGON_ATTS);\n          return React.createElement(Polygon, _extends({\n            key: i\n          }, componentAtts, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 200,\n              columnNumber: 14\n            }\n          }), childs);\n\n        case 'polyline':\n          componentAtts = this.obtainComponentAtts(node, POLYLINE_ATTS);\n          return React.createElement(Polyline, _extends({\n            key: i\n          }, componentAtts, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 203,\n              columnNumber: 14\n            }\n          }), childs);\n\n        case 'text':\n          componentAtts = this.obtainComponentAtts(node, TEXT_ATTS);\n\n          if (componentAtts.y) {\n            componentAtts.y = fixYPosition(componentAtts.y, node);\n          }\n\n          return React.createElement(Text, _extends({\n            key: i\n          }, componentAtts, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 209,\n              columnNumber: 14\n            }\n          }), childs);\n\n        case 'tspan':\n          componentAtts = this.obtainComponentAtts(node, TEXT_ATTS);\n\n          if (componentAtts.y) {\n            componentAtts.y = fixYPosition(componentAtts.y, node);\n          }\n\n          return React.createElement(TSpan, _extends({\n            key: i\n          }, componentAtts, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 215,\n              columnNumber: 14\n            }\n          }), childs);\n\n        default:\n          return null;\n      }\n    }\n  }, {\n    key: \"obtainComponentAtts\",\n    value: function obtainComponentAtts(_ref, enabledAttributes) {\n      var _this2 = this;\n\n      var attributes = _ref.attributes;\n      var styleAtts = {};\n      Array.from(attributes).forEach(function (_ref2) {\n        var nodeName = _ref2.nodeName,\n            nodeValue = _ref2.nodeValue;\n\n        _extends(styleAtts, utils.transformStyle({\n          nodeName: nodeName,\n          nodeValue: nodeValue,\n          fillProp: _this2.state.fill\n        }));\n      });\n      var componentAtts = Array.from(attributes).map(utils.camelCaseNodeName).map(utils.removePixelsFromNodeValue).filter(utils.getEnabledAttributes(enabledAttributes.concat(COMMON_ATTS))).reduce(function (acc, _ref3) {\n        var nodeName = _ref3.nodeName,\n            nodeValue = _ref3.nodeValue;\n        acc[nodeName] = _this2.state.fill && nodeName === 'fill' && nodeValue !== 'none' ? _this2.state.fill : nodeValue;\n        return acc;\n      }, {});\n\n      _extends(componentAtts, styleAtts);\n\n      return componentAtts;\n    }\n  }, {\n    key: \"inspectNode\",\n    value: function inspectNode(node) {\n      if (!ACCEPTED_SVG_ELEMENTS.includes(node.nodeName)) {\n        return null;\n      }\n\n      var arrayElements = [];\n\n      if (node.childNodes && node.childNodes.length > 0) {\n        for (var i = 0; i < node.childNodes.length; i++) {\n          var isTextValue = node.childNodes[i].nodeValue;\n\n          if (isTextValue) {\n            arrayElements.push(node.childNodes[i].nodeValue);\n          } else {\n            var nodo = this.inspectNode(node.childNodes[i]);\n\n            if (nodo != null) {\n              arrayElements.push(nodo);\n            }\n          }\n        }\n      }\n\n      return this.createSVGElement(node, arrayElements);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      try {\n        if (this.state.svgXmlData == null) {\n          return null;\n        }\n\n        var inputSVG = this.state.svgXmlData.substring(this.state.svgXmlData.indexOf(\"<svg \"), this.state.svgXmlData.indexOf(\"</svg>\") + 6);\n        var doc = new xmldom.DOMParser().parseFromString(inputSVG);\n        var rootSVG = this.inspectNode(doc.childNodes[0]);\n        return React.createElement(View, {\n          style: this.props.style,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 288,\n            columnNumber: 11\n          }\n        }, rootSVG);\n      } catch (e) {\n        console.error(\"ERROR SVG\", e);\n        return null;\n      }\n    }\n  }]);\n\n  return SvgUri;\n}(Component);\n\nSvgUri.propTypes = {\n  style: PropTypes.object,\n  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  height: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  svgXmlData: PropTypes.string,\n  source: PropTypes.any,\n  fill: PropTypes.string\n};\nmodule.exports = SvgUri;","map":{"version":3,"sources":["C:/Users/Matheus/Documentos/Projetos/Programacao/React Native/ConexaoVagas-App/node_modules/react-native-svg-uri/index.js"],"names":["React","Component","PropTypes","xmldom","resolveAssetSource","Svg","Circle","Ellipse","G","LinearGradient","RadialGradient","Line","Path","Polygon","Polyline","Rect","Text","TSpan","Defs","Stop","utils","ACCEPTED_SVG_ELEMENTS","SVG_ATTS","G_ATTS","CIRCLE_ATTS","PATH_ATTS","RECT_ATTS","LINE_ATTS","LINEARG_ATTS","concat","RADIALG_ATTS","STOP_ATTS","ELLIPSE_ATTS","TEXT_ATTS","POLYGON_ATTS","POLYLINE_ATTS","COMMON_ATTS","ind","fixYPosition","y","node","attributes","fontSizeAttr","Object","keys","find","a","name","parseFloat","value","parentNode","SvgUri","props","state","fill","svgXmlData","createSVGElement","bind","obtainComponentAtts","inspectNode","fetchSVGData","isComponentMounted","source","uri","nextProps","oldSource","setState","responseXML","fetch","response","text","console","error","children","child","trim","length","splice","indexOf","childs","trimElementChilden","componentAtts","i","nodeName","width","height","enabledAttributes","styleAtts","Array","from","forEach","nodeValue","transformStyle","fillProp","map","camelCaseNodeName","removePixelsFromNodeValue","filter","getEnabledAttributes","reduce","acc","includes","arrayElements","childNodes","isTextValue","push","nodo","inputSVG","substring","doc","DOMParser","parseFromString","rootSVG","style","e","propTypes","object","oneOfType","string","number","any","module","exports"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\nimport {View} from 'react-native';\nimport PropTypes from 'prop-types'\nimport xmldom from 'xmldom';\nimport resolveAssetSource from 'react-native/Libraries/Image/resolveAssetSource';\n\nimport Svg,{\n    Circle,\n    Ellipse,\n    G ,\n    LinearGradient,\n    RadialGradient,\n    Line,\n    Path,\n    Polygon,\n    Polyline,\n    Rect,\n    Text,\n    TSpan,\n    Defs,\n    Stop\n} from 'react-native-svg';\n\nimport * as utils from './utils';\n\nconst ACCEPTED_SVG_ELEMENTS = [\n  'svg',\n  'g',\n  'circle',\n  'path',\n  'rect',\n  'defs',\n  'line',\n  'linearGradient',\n  'radialGradient',\n  'stop',\n  'ellipse',\n  'polygon',\n  'polyline',\n  'text',\n  'tspan'\n];\n\n// Attributes from SVG elements that are mapped directly.\nconst SVG_ATTS = ['viewBox', 'width', 'height'];\nconst G_ATTS = ['id'];\n\nconst CIRCLE_ATTS = ['cx', 'cy', 'r'];\nconst PATH_ATTS = ['d'];\nconst RECT_ATTS = ['width', 'height'];\nconst LINE_ATTS = ['x1', 'y1', 'x2', 'y2'];\nconst LINEARG_ATTS = LINE_ATTS.concat(['id', 'gradientUnits']);\nconst RADIALG_ATTS = CIRCLE_ATTS.concat(['id', 'gradientUnits']);\nconst STOP_ATTS = ['offset'];\nconst ELLIPSE_ATTS = ['cx', 'cy', 'rx', 'ry'];\n\nconst TEXT_ATTS = ['fontFamily', 'fontSize', 'fontWeight']\n\nconst POLYGON_ATTS = ['points'];\nconst POLYLINE_ATTS = ['points'];\n\nconst COMMON_ATTS = ['fill', 'fillOpacity', 'stroke', 'strokeWidth', 'strokeOpacity', 'opacity',\n    'strokeLinecap', 'strokeLinejoin',\n    'strokeDasharray', 'strokeDashoffset', 'x', 'y', 'rotate', 'scale', 'origin', 'originX', 'originY'];\n\nlet ind = 0;\n\nfunction fixYPosition (y, node) {\n  if (node.attributes) {\n    const fontSizeAttr = Object.keys(node.attributes).find(a => node.attributes[a].name === 'font-size');\n    if (fontSizeAttr) {\n      return '' + (parseFloat(y) - parseFloat(node.attributes[fontSizeAttr].value));\n    }\n  }\n  if (!node.parentNode) {\n    return y;\n  }\n  return fixYPosition(y, node.parentNode)\n}\n\nclass SvgUri extends Component{\n\n  constructor(props){\n    super(props);\n\n    this.state = {fill: props.fill, svgXmlData: props.svgXmlData};\n\n    this.createSVGElement     = this.createSVGElement.bind(this);\n    this.obtainComponentAtts  = this.obtainComponentAtts.bind(this);\n    this.inspectNode          = this.inspectNode.bind(this);\n    this.fetchSVGData         = this.fetchSVGData.bind(this);\n\n    this.isComponentMounted   = false;\n\n    // Gets the image data from an URL or a static file\n    if (props.source) {\n      const source = resolveAssetSource(props.source) || {};\n      this.fetchSVGData(source.uri);\n    }\n  }\n\n  componentWillMount() {\n    this.isComponentMounted = true;\n  }\n\n  componentWillReceiveProps (nextProps){\n    if (nextProps.source) {\n      const source = resolveAssetSource(nextProps.source) || {};\n      const oldSource = resolveAssetSource(this.props.source) || {};\n      if(source.uri !== oldSource.uri){\n        this.fetchSVGData(source.uri);\n      }\n    }\n\n    if (nextProps.svgXmlData !== this.props.svgXmlData) {\n      this.setState({ svgXmlData: nextProps.svgXmlData });\n    }\n\n    if (nextProps.fill !== this.props.fill) {\n      this.setState({ fill: nextProps.fill });\n    }\n  }\n\n  componentWillUnmount() {\n    this.isComponentMounted = false\n  }\n\n  async fetchSVGData(uri){\n    let responseXML = null;\n    try {\n      const response = await fetch(uri);\n      responseXML = await response.text();\n    } catch(e) {\n      console.error(\"ERROR SVG\", e);\n    } finally {\n      if (this.isComponentMounted) {\n        this.setState({svgXmlData:responseXML});\n      }\n    }\n\n    return responseXML;\n  }\n   \n  // Remove empty strings from children array  \n  trimElementChilden(children) {\n    for (child of children) {\n      if (typeof child === 'string') {\n        if (child.trim.length === 0)\n          children.splice(children.indexOf(child), 1); \n      }\n    }\n  }\n\n  createSVGElement(node, childs){\n    this.trimElementChilden(childs);\n    let componentAtts = {};\n    const i = ind++;\n    switch (node.nodeName) {\n    case 'svg':\n      componentAtts = this.obtainComponentAtts(node, SVG_ATTS);\n      if (this.props.width) {\n        componentAtts.width = this.props.width;\n      }\n      if (this.props.height) {\n        componentAtts.height = this.props.height;\n      }\n\n      return <Svg key={i} {...componentAtts}>{childs}</Svg>;\n    case 'g':\n      componentAtts = this.obtainComponentAtts(node, G_ATTS);\n      return <G key={i} {...componentAtts}>{childs}</G>;\n    case 'path':\n      componentAtts = this.obtainComponentAtts(node, PATH_ATTS);\n      return <Path key={i} {...componentAtts}>{childs}</Path>;\n    case 'circle':\n      componentAtts = this.obtainComponentAtts(node, CIRCLE_ATTS);\n      return <Circle key={i} {...componentAtts}>{childs}</Circle>;\n    case 'rect':\n      componentAtts = this.obtainComponentAtts(node, RECT_ATTS);\n      return <Rect key={i} {...componentAtts}>{childs}</Rect>;\n    case 'line':\n      componentAtts = this.obtainComponentAtts(node, LINE_ATTS);\n      return <Line key={i} {...componentAtts}>{childs}</Line>;\n    case 'defs':\n      return <Defs key={i}>{childs}</Defs>;\n    case 'linearGradient':\n      componentAtts = this.obtainComponentAtts(node, LINEARG_ATTS);\n      return <LinearGradient key={i} {...componentAtts}>{childs}</LinearGradient>;\n    case 'radialGradient':\n      componentAtts = this.obtainComponentAtts(node, RADIALG_ATTS);\n      return <RadialGradient key={i} {...componentAtts}>{childs}</RadialGradient>;\n    case 'stop':\n      componentAtts = this.obtainComponentAtts(node, STOP_ATTS);\n      return <Stop key={i} {...componentAtts}>{childs}</Stop>;\n    case 'ellipse':\n      componentAtts = this.obtainComponentAtts(node, ELLIPSE_ATTS);\n      return <Ellipse key={i} {...componentAtts}>{childs}</Ellipse>;\n    case 'polygon':\n      componentAtts = this.obtainComponentAtts(node, POLYGON_ATTS);\n      return <Polygon key={i} {...componentAtts}>{childs}</Polygon>;\n    case 'polyline':\n      componentAtts = this.obtainComponentAtts(node, POLYLINE_ATTS);\n      return <Polyline key={i} {...componentAtts}>{childs}</Polyline>;\n    case 'text':\n      componentAtts = this.obtainComponentAtts(node, TEXT_ATTS);\n      if (componentAtts.y) {\n        componentAtts.y = fixYPosition(componentAtts.y, node)\n      }\n      return <Text key={i} {...componentAtts}>{childs}</Text>;\n    case 'tspan':\n      componentAtts = this.obtainComponentAtts(node, TEXT_ATTS);\n      if (componentAtts.y) {\n        componentAtts.y = fixYPosition(componentAtts.y, node)\n      }\n      return <TSpan key={i} {...componentAtts}>{childs}</TSpan>;\n    default:\n      return null;\n    }\n  }\n\n  obtainComponentAtts({attributes}, enabledAttributes) {\n    const styleAtts = {};\n    Array.from(attributes).forEach(({nodeName, nodeValue}) => {\n      Object.assign(styleAtts, utils.transformStyle({\n        nodeName,\n        nodeValue,\n        fillProp: this.state.fill\n      }));\n    });\n\n     const componentAtts =  Array.from(attributes)\n      .map(utils.camelCaseNodeName)\n      .map(utils.removePixelsFromNodeValue)\n      .filter(utils.getEnabledAttributes(enabledAttributes.concat(COMMON_ATTS)))\n      .reduce((acc, {nodeName, nodeValue}) => {\n        acc[nodeName] = (this.state.fill && nodeName === 'fill' && nodeValue !== 'none') ? this.state.fill : nodeValue\n        return acc\n      }, {});\n    Object.assign(componentAtts, styleAtts);\n\n    return componentAtts;\n  }\n\n  inspectNode(node){\n    // Only process accepted elements\n    if (!ACCEPTED_SVG_ELEMENTS.includes(node.nodeName)) {\n      return null;\n    }\n\n    // Process the xml node\n    const arrayElements = [];\n\n    // if have children process them.\n    // Recursive function.\n    if (node.childNodes && node.childNodes.length > 0){\n        for (let i = 0; i < node.childNodes.length; i++){\n          const isTextValue = node.childNodes[i].nodeValue\n          if (isTextValue) {\n            arrayElements.push(node.childNodes[i].nodeValue)\n          } else {\n            const nodo = this.inspectNode(node.childNodes[i]);\n            if (nodo != null) {\n              arrayElements.push(nodo);\n            }\n          }\n        }\n    }\n\n    return this.createSVGElement(node, arrayElements);\n  }\n\n  render () {\n    try {\n      if (this.state.svgXmlData == null) {\n        return null;\n      }\n\n      const inputSVG = this.state.svgXmlData.substring(\n        this.state.svgXmlData.indexOf(\"<svg \"),\n        (this.state.svgXmlData.indexOf(\"</svg>\") + 6)\n      );\n\n      const doc = new xmldom.DOMParser().parseFromString(inputSVG);\n\n      const rootSVG = this.inspectNode(doc.childNodes[0]);\n\n      return(\n          <View style={this.props.style}>\n            {rootSVG}\n          </View>\n      );\n    } catch(e){\n      console.error(\"ERROR SVG\", e);\n      return null;\n    }\n  }\n}\n\nSvgUri.propTypes = {\n  style: PropTypes.object,\n  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  height: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  svgXmlData: PropTypes.string,\n  source: PropTypes.any,\n  fill: PropTypes.string,\n}\n\nmodule.exports = SvgUri;\n"]},"metadata":{},"sourceType":"module"}